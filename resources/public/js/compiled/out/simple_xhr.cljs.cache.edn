;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name simple-xhr, :imports nil, :requires {goog.structs.Map goog.structs.Map, gjson goog.json, goog.json goog.json, manager goog.net.XhrManager, goog.net.XhrManager goog.net.XhrManager}, :uses nil, :defs {xhr-manager {:name simple-xhr/xhr-manager, :file "resources\\public\\js\\compiled\\out\\simple_xhr.cljs", :line 11, :column 1, :end-line 11, :end-column 17, :meta {:file "d:\\workspace\\projects\\shadertest\\resources\\public\\js\\compiled\\out\\simple_xhr.cljs", :line 11, :column 6, :end-line 11, :end-column 17}}, request {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\shadertest\\resources\\public\\js\\compiled\\out\\simple_xhr.cljs", :line 18, :column 7, :end-line 18, :end-column 14, :arglists (quote ([& {:keys [url id method content json headers priority retries complete success error complete-after], :or {method "GET", retries 0}}])), :doc "Asynchronously make a network request for the resource at url. If\n  provided via the `:on-success` and `:on-error` keyword arguments, the\n  appropriate one of `on-success` or `on-error` will be called on\n  completion. They will be passed a map containing the keys `:id`,\n  `:body`, `:status`, and `:event`. The entry for `:event` contains an\n  instance of the `goog.net.XhrManager.Event`.\n\n  Other allowable keyword arguments are `:method`, `:content`, `:headers`,\n  `:priority`, and `:retries`. `:method` defaults to \"GET\" and `:retries`\n  defaults to `0`.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [url id method content json headers priority retries complete success error complete-after], :or {method "GET", retries 0}})], :arglists ([& {:keys [url id method content json headers priority retries complete success error complete-after], :or {method "GET", retries 0}}]), :arglists-meta (nil)}}, :name simple-xhr/request, :variadic true, :file "resources\\public\\js\\compiled\\out\\simple_xhr.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [url id method content json headers priority retries complete success error complete-after], :or {method "GET", retries 0}})], :arglists ([& {:keys [url id method content json headers priority retries complete success error complete-after], :or {method "GET", retries 0}}]), :arglists-meta (nil)}, :method-params [({:keys [url id method content json headers priority retries complete success error complete-after], :or {method "GET", retries 0}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [url id method content json headers priority retries complete success error complete-after], :or {method "GET", retries 0}}]), :doc "Asynchronously make a network request for the resource at url. If\n  provided via the `:on-success` and `:on-error` keyword arguments, the\n  appropriate one of `on-success` or `on-error` will be called on\n  completion. They will be passed a map containing the keys `:id`,\n  `:body`, `:status`, and `:event`. The entry for `:event` contains an\n  instance of the `goog.net.XhrManager.Event`.\n\n  Other allowable keyword arguments are `:method`, `:content`, `:headers`,\n  `:priority`, and `:retries`. `:method` defaults to \"GET\" and `:retries`\n  defaults to `0`."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:method :content :retries :complete-after :headers :success :priority :id :url :error :complete :json}, :order [:complete :json :retries :method :content :complete-after :headers :success :priority :id :url :error]}, :doc "Make network requests.\n\n  Adapted from ClojureScript One and Bobby Calderwood's Trail framework:\n  https://github.com/brentonashworth/one/blob/master/src/lib/cljs/one/browser/remote.cljs\n  https://github.com/bobby/trail"}